import { useEffect, useState } from "react"
import { motion } from "framer-motion"
import { Card, CardContent,  CardHeader, CardTitle } from "../components/ui/card"
import { Button } from "../components/ui/button"
import { Badge } from "../components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../components/ui/tabs"
import {
  FileText,
  Mail,
  TrendingUp,
  Eye,
  Plus,
  Clipboard
} from "lucide-react"
import { useAuth } from "../components/auth-provider"
import { Link, useNavigate } from "react-router-dom"
import {client  , GET_JOBS_BY_USER_ID , GET_RESUME_BY_USER_ID  , Get_cover_letter_by_userId ,  GET_COLD_EMAIL_BY_USERID   } from "../lib/api"
import toast , {Toaster} from "react-hot-toast"

export interface Resume {
  id: string
  fileUrl: string
  resume_data: ResumeData
}

export interface ResumeData {
  // Name
  Name?: string
  name?: string

  // Achievements
  Achievements?: string[]
  achievements?: string[]

  // Education
  Education?: EducationEntry[]
  education?: EducationEntry[]

  // Experience
  Experience?: ExperienceEntry[]
  experience?: ExperienceEntry[]

  // Projects
  Projects?: ProjectEntry[]
  projects?: ProjectEntry[]

  // Skills
  Skills?: SkillsSection
  skills?: SkillsSection

  // Positions of Responsibility
  PositionsOfResponsibility: ResponsibilityEntry[]
  "positions of responsibility"?: ResponsibilityEntry[]
}

export interface EducationEntry {
  degree?: string
  details?: string
  duration?: string
  school?:string
}

export interface ExperienceEntry {
  title?: string
  company?: string
  duration?: string
  description?: string
  keyPoints?: string[]
}

export interface ProjectEntry {
  name?: string
  description?: string
  technologies?: string[]
  link?: string
}

export interface ResponsibilityEntry {
  title?: string
  role?: string
  organization?: string
  duration?: string
  description?: string
}

export interface SkillsSection {
  databases?: string[]
  areasOfInterest?: string[]
  frameworksAndTools?: string[]
  programmingLanguages?: string[]
}


export interface CoverLetter {
  id: string
  userId: string
  fileUrl: string
  data?: string // generated by DeepSeek
  createdAt: string
  title?: string // optional local mapping if you use titles in UI
}

export interface ColdEmail {
  id: string
  userId: string
  data?: string
  fileUrl?: string
  createdAt: string
  title?: string // optional, if used in frontend to identify emails
}

export interface Job {
  id: string
  url: string
  title: string
  company?: string
  description?: string
  location?: string
  type: string
  createdAt: string
  userId: string
}

interface GetResumeByUserIdResponse {
  getResumeByUserId: Resume[]
}

interface GetCoverletterByUserIdResponse {
  getCoverletterByUserId: CoverLetter[]
}

interface GetJobbyUserIdResponse {
  getJobbyUserId: Job[]
}

interface GetColdEmailByUserIdResponse {
  getColdEmailByUserId: ColdEmail[]
}



export function Dashboard() {

const userId = localStorage.getItem("userId") || ""
const [resumes, setResumes] = useState<Resume[]>([]);
const [coverLettersList, setCoverLettersList] = useState<CoverLetter[]>([]);
const [jobList, setJobList] = useState<Job[]>([]);
const [coldEmails, setColdEmails] = useState<ColdEmail[]>([]);


  const fetchResumedata_by_user_id = async (): Promise<GetResumeByUserIdResponse> => {
  return await client.request(GET_RESUME_BY_USER_ID, { userId })
}

const fetchCoverLetterdata_by_user_id = async (): Promise<GetCoverletterByUserIdResponse> => {
  return await client.request(Get_cover_letter_by_userId, { userId })
}

const fetchJobdata_by_user_id = async (): Promise<GetJobbyUserIdResponse> => {
  return await client.request(GET_JOBS_BY_USER_ID, { userId })
}

const fetchColdEmaildata_by_user_id = async (): Promise<GetColdEmailByUserIdResponse> => {
  return await client.request(GET_COLD_EMAIL_BY_USERID, { userId })
}


  useEffect(() => {
  const loadData = async () => {
    try {
      const resData = await fetchResumedata_by_user_id();
      setResumes(resData?.getResumeByUserId || []);

      const coverData = await fetchCoverLetterdata_by_user_id();
      setCoverLettersList(coverData?.getCoverletterByUserId || []);

      const jobData = await fetchJobdata_by_user_id();
      setJobList(jobData?.getJobbyUserId || []);

      const emails=await fetchColdEmaildata_by_user_id();
      setColdEmails(emails?.getColdEmailByUserId || []);

    } catch (err) {
      console.error("Failed to fetch dashboard data:", err);
    }
  };

  if (userId) loadData();
}, []);



  const { user, logout } = useAuth()
  const navigate = useNavigate()
  const [activeTab, setActiveTab] = useState("overview")

  if (!user) {
    navigate("/auth")
    return null
  }

  return (
    <div className="space-y-8 text-gray-600 dark:text-gray-300">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0"
      >
        <div>
          <h1 className="text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 dark:from-white dark:to-gray-300 bg-clip-text text-transparent">
            Welcome back, {user?.firstName}!
          </h1>
          <p className="text-gray-600 dark:text-gray-300 mt-1">
            Manage your career documents and track your job search progress
          </p>
        </div>
        <div className="flex items-center space-x-3">
          <Badge
            className={`${user.plan === "pro" ? "bg-gradient-to-r from-purple-500 to-pink-500" : "bg-gray-500"} text-white`}
          >
            {user.plan.toUpperCase()} Plan
          </Badge>
          <Button onClick={logout} variant="outline" className="bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm">
            Sign Out
          </Button>
        </div>
      </motion.div>

      {/* Stats Cards */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6"
      >
        <Card className="bg-gradient-to-br from-blue-500/10 to-blue-600/10 border-blue-500/20 backdrop-blur-xl ">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-blue-600 dark:text-blue-400">Total Resumes</p>
                <p className="text-3xl font-bold text-blue-700 dark:text-blue-300">{resumes?.length || 0}</p>
              </div>
              <FileText className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-purple-500/10 to-purple-600/10 border-purple-500/20 backdrop-blur-xl">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-purple-600 dark:text-purple-400">Cover Letters</p>
                <p className="text-3xl font-bold text-purple-700 dark:text-purple-300">{coverLettersList?.length || 0}</p>
              </div>
              <Mail className="w-8 h-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-500/10 to-green-600/10 border-green-500/20 backdrop-blur-xl">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-green-600 dark:text-green-400">Email Templates</p>
                <p className="text-3xl font-bold text-green-700 dark:text-green-300">{coldEmails?.length}</p>
              </div>
              <Mail className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-orange-500/10 to-orange-600/10 border-orange-500/20 backdrop-blur-xl">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-orange-600 dark:text-orange-400">Applications</p>
                <p className="text-3xl font-bold text-orange-700 dark:text-orange-300">{(resumes?.length + coverLettersList.length + coldEmails.length) || 0}</p>
                <p className="text-xs text-orange-600 dark:text-orange-400">This month</p>
              </div>
              <TrendingUp className="w-8 h-8 text-orange-500" />
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Main Content Tabs */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.2 }}>
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6 my-8 ">
         <TabsList className="
  grid w-full 
  grid-cols-2 md:grid-cols-4 
  gap-4
  bg-white/30 dark:bg-gray-800/30 backdrop-blur-sm 
  pb-8 rounded-xl shadow-sm
">
  <TabsTrigger 
    value="Jobs" 
    className="
      text-sm md:text-base 
      px-4 py-2 rounded-full 
      transition-all duration-300 
      data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-purple-500 data-[state=active]:text-white 
      hover:bg-gradient-to-r hover:from-blue-100 hover:to-purple-100 dark:hover:from-blue-900/20 dark:hover:to-purple-900/20
      font-medium
    "
  >
    Jobs
  </TabsTrigger>

  <TabsTrigger 
    value="resumes" 
    className="
      text-sm md:text-base 
      px-4 py-2 rounded-full 
      transition-all duration-300 
      data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-purple-500 data-[state=active]:text-white 
      hover:bg-gradient-to-r hover:from-blue-100 hover:to-purple-100 dark:hover:from-blue-900/20 dark:hover:to-purple-900/20
      font-medium
    "
  >
    Resumes
  </TabsTrigger>

  <TabsTrigger 
    value="cover-letters" 
    className="
      text-sm md:text-base 
      px-4 py-2 rounded-full 
      transition-all duration-300 
      data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-purple-500 data-[state=active]:text-white 
      hover:bg-gradient-to-r hover:from-blue-100 hover:to-purple-100 dark:hover:from-blue-900/20 dark:hover:to-purple-900/20
      font-medium
    "
  >
    Cover Letters
  </TabsTrigger>

  <TabsTrigger 
    value="emails" 
    className="
      text-sm md:text-base 
      px-4 py-2 rounded-full 
      transition-all duration-300 
      data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-purple-500 data-[state=active]:text-white 
      hover:bg-gradient-to-r hover:from-blue-100 hover:to-purple-100 dark:hover:from-blue-900/20 dark:hover:to-purple-900/20
      font-medium
    "
  >
    Email Templates
  </TabsTrigger>
</TabsList>

          <TabsContent value="Jobs" className="space-y-6 md:mt-0 mt-12">
            <div className="flex justify-between items-center">
              <h2 className="md:text-2xl text-xl font-bold">My Jobs</h2>
              <Link to="/">
              <Button className="bg-gradient-to-r text-white from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600">
                <Plus className="w-4 h-4 mr-2" />
                Scraped Jobs
              </Button>
              </Link>
            </div>

            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
              {jobList.map((job) => (
  <div key={job.id} className="relative group">
    <Card
      className="bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl border-white/20 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105"
    >
      <CardHeader>
        <div className="flex items-start justify-between">
          <FileText className="w-8 h-8 text-blue-500" />
        </div>
        <CardTitle className="text-lg">
          {(job?.title || job?.company?.trim())}
        </CardTitle>
      </CardHeader>

      <CardContent className="space-y-4">
        <div className="flex space-x-2">
          <Link to={`/job/${job.id}`}>
            <Button size="sm" variant="outline" className="flex-1">
              <Eye className="w-4 h-4 mr-1" />
              View
            </Button>
          </Link>
        </div>
      </CardContent>
    </Card>

    {/* Copy icon */}
    <button
      onClick={() => {
        navigator.clipboard.writeText(job.id);
        toast.success("ID copied to clipboard!");
        console.log('copied' , job.id)
      }}
      className="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-white/90 p-1 rounded-full shadow-md"
    >
      <Clipboard className="w-4 h-4 text-gray-800" />
    </button>
  </div>
))}
              
            </div>
          </TabsContent>

          <TabsContent value="resumes" className="space-y-6 md:mt-0 mt-12">
            <div className="flex justify-between items-center">
              <h2 className="md:text-2xl text-xl font-bold">My Resumes</h2>
              <Link to="/">
              <Button className="bg-gradient-to-r text-white from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600">
                <Plus className="w-4 h-4 mr-2" />
                Parse New Resume
              </Button>
              </Link>
            </div>

            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {resumes.map((resume) => (
  <div key={resume.id} className="relative group">
    <Card
      className="bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl border-white/20 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105"
    >
      <CardHeader>
        <div className="flex items-start justify-between">
          <FileText className="w-8 h-8 text-blue-500" />
        </div>
        <CardTitle className="text-lg">
          {(resume?.resume_data?.Name || resume?.resume_data?.name)}
        </CardTitle>
      </CardHeader>

      <CardContent className="space-y-4">
        <div className="flex space-x-2">
          <Link to={`/resume/${resume.id}`}>
            <Button size="sm" variant="outline" className="flex-1">
              <Eye className="w-4 h-4 mr-1" />
              View
            </Button>
          </Link>
        </div>
      </CardContent>
    </Card>

    {/* Copy icon */}
    <button
      onClick={() => {
        navigator.clipboard.writeText(resume.id);
        toast.success("ID copied to clipboard!");
        console.log('copied' , resume.id)
      }}
      className="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-white/90 p-1 rounded-full shadow-md"
    >
      <Clipboard className="w-4 h-4 text-gray-800" />
    </button>
  </div>
))}
              
            </div>
          </TabsContent>

          <TabsContent value="cover-letters" className="space-y-6 md:mt-0 mt-12">
            <div className="flex justify-between items-center">
              <h2 className="md:text-2xl text-xl font-bold">Cover Letters</h2>
              <Link to ="/">
              <Button className="bg-gradient-to-r text-white from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600">
                <Plus className="w-4 h-4 mr-2" />
                Generate New Cover Letter
              </Button>
              </Link>
            </div>

            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {coverLettersList.map((letter, index) => (
                <Card
                  key={letter.id}
                  className="bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl border-white/20 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105"
                >
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <Mail className="w-8 h-8 text-purple-500" />
                      {/* <Badge className={getStatusColor(letter.status)}>{letter.status}</Badge> */}
                    </div>
                    <CardTitle className="text-lg">{letter.title?.trim() || `Cover Letter ${index + 1}`}</CardTitle>
                    {/* <CardDescription>
                      {letter.company} • {letter.position}
                    </CardDescription> */}
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center justify-between">
                      {/* <span className="text-sm text-gray-500">Created: {letter.created}</span> */}
                      {/* <span className={`text-sm font-bold ${getAIScoreColor(letter.aiScore)}`}>
                        AI Score: {letter.aiScore}%
                      </span> */}
                    </div>
                    <div className="flex space-x-2">
                      <Link to={`/cover_letter/${letter.id}`}>
                      <Button size="sm" variant="outline" className="flex-1">
                        <Eye className="w-4 h-4 mr-1" />
                        View
                      </Button>
                      </Link>
                      {/* <Button size="sm" variant="outline" className="flex-1">
                        <Edit3 className="w-4 h-4 mr-1" />
                        Edit
                      </Button>
                      <Button size="sm" variant="outline">
                        <Share2 className="w-4 h-4" />
                      </Button> */}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="emails" className="space-y-6 md:mt-0 mt-12">
            <div className="flex justify-between items-center">
              <h2 className="md:text-2xl text-xl font-bold">Email Templates</h2>
              <Link to="/">
              <Button className="bg-gradient-to-r text-white from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600">
                <Plus className="w-4 h-4 mr-2" />
                Create Email Template
              </Button>
              </Link>
            </div>

            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {coldEmails.map((template,index) => (
                <Card
                  key={template.id}
                  className="bg-white/70 dark:bg-gray-900/70 backdrop-blur-xl border-white/20 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105"
                >
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      {/* <Mail className="w-8 h-8 text-green-500" />
                      <Badge variant="secondary">{template.type}</Badge> */}
                    </div>
                    <CardTitle className="text-lg">{template.title || `Cold Email ${index + 1}`}</CardTitle>
                    {/* <CardDescription>
                      Used {template.timesUsed} times • Last used: {template.lastUsed}
                    </CardDescription> */}
                  </CardHeader>
                  <CardContent>
                    <div className="flex space-x-2">
                      <Link to={`/email/${template.id}`}>
                      <Button size="sm" variant="outline" className="flex-1">
                        <Eye className="w-4 h-4 mr-1" />
                        View
                      </Button>
                      </Link>
                      {/* <Button size="sm" variant="outline" className="flex-1">
                        <Edit3 className="w-4 h-4 mr-1" />
                        Edit
                      </Button>
                      <Button size="sm" variant="outline">
                        <Star className="w-4 h-4" />
                      </Button> */}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </motion.div>
      <Toaster/>
    </div>
  )
}


